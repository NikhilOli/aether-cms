generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
  type              String
  expiresAt         Int?
  refreshToken      String?
  accessToken       String?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt


  @@unique([provider, providerAccountId])
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String?   @unique
  emailVerified  DateTime?
  name      String?
  username  String?   @unique @default(nanoid())
  image     String?
  role      String    @default("USER")
  accounts  Account[]
  sessions  Session[]
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  slug      String     @unique
  title     String
  content   String
  thumbnail String?
  desc      String?
  keywords  String?
  excerpt   String?
  catSlug   String?
  category  Category?  @relation(fields: [catSlug], references: [slug])
  createdAt DateTime   @default(now())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  status    PostStatus @default(DRAFT)
  updatedAt DateTime   @updatedAt
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug  String @unique
  posts Post[]
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}
